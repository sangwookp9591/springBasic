JPA
- Java Persistence API
- 자바 진영의 ORM 기술 표준

ORM
- Object-relational mapping(객체 관계 매핑)
- 객체는 객체대로 설계
- 관계형 데이터베이스는 관계형 데이터베이스대로 설계
- ORM 프레임워크가 중간에서 매핑
- 대중적인 언어에는 대부분 ORM 기술이 존재

JPA는 애필리케이션과 JDBC 사이에서 동작

JAVA 애플리케이션 -       -           - SQL ->
                  JPA       JDBC API              DB
                -       -          <-결과 반환-


삽입
-쿼리를 개발자가 만드는게아니고 JPA가 만들어줌
- 제일중요한것은 패러다임 불일치 해결


조회
- JPA가 객체를 보고 적절한 SELECT쿼리를 만듦
- ResultSet 매핑을 객체에 해주고
- 제일중요한것은 패러다임 불일치 해결


JPA는 표준 명세
-JPA는 인터페이스의 모음
-JPA 2.1 표준명세를 구현한 3가지 구현체
-하이버네이트, EclipseLink, DataNucleus

생산성 - JPA와 CRUD

저장 : jpa.persist(member)
조회 : Member member = jpa.find(memberId)
수정 : member.setName("변경할 이름");
삭제 : jpa.remove(member)


유지보수
-쿼리를 수정할필요 없이 필드만 추가하면된다.

JPA와 패러다임의 불일치 해결
1.JPA와 상속
  -저장
     개발자가 할일 jpa.persist(album);
     나머진 JPA가 처리 INSERT INTO ITEM INSERT INTO ALBUM
  즉 중간에 패러다임이 안맞는 부분을 JPA가 처리해준다
2.JPA와 연관관계
  - 연관관계 저장
     member.setTeam(team);
     jpa.persist(member)
  - 객체 그래프 탐색
     Member member = jpa.find(Member.class, memberId);
     Team team =  member.getTeam();
3.JPA와 객체 그래프 탐색
  -JPA를 통해가져온 데이터는 믿을 수 있기때문에 Collection 에서 가져오듯이 자유롭게 가져와서 쓰면된다.
4.JPA와 비교하기
  - Member member1 = jpa.find(Member.class, memberId);
    Member member2 = jpa.find(Member.class, memberId);
    member1 = member2
  - 동일한 트랜잭션에서 조회한 엔티티는 같음을 보장



JPA의 성능 최적화 기능
1. 1차 캐시와 동일성(identity) 보장
   - 1. 같은 트랜잭션 안에서는 같은 엔티티를 반환 - 약간의 조회 성능 향상
   - 2. DB Isolation Level이 Read Commit이어도 애플리케이션에서 Repeatable Read 보장
   - Member member1 = jpa.find(Member.class, memberId); //SQL
     Member member2 = jpa.find(Member.class, memberId); //캐시(우리가 알고있는 캐시랑다름 트랜잭션안에 일어나는 캐시이기떄문)
     즉  SQL 1번만 실행
2. 트랜잭션을 지원하는 쓰기 지연(transactional write-behind)
   - 1. 트랜잭션을 커밋할 때까지 INSERT SQL을 모음
   - 2. JDBC BATCH SQL기능을 사용해서 한번에 SQL 전송
        transaction.begin(); // 트랜잭션 시작
        em.persist(memberA);
        em.persist(memberB);
        em.persist(memberC);
        //여기까지  INSERT SQL을 데이터베이스에 보내지 않는다.

        //커밋하는 순간 데이터베이스에 INSERT SQL을 모아서 보낸다. (network에 한번만딱 보내기때문에 접근효율성 향샹)
        transaction.commit(); //트랜잭션 커밋
3. 지연로딩(Lazy Loading)과 즉시 로딩
   1. 지연 로딩 :  객체가 실제 사용될 떄 로딩
       Member member = memberDAO.find(memberId);     --> SELECT * FROM MEMBER
       Team team = member.getTeam();
       String teamName = team.getName();             --> SELECT * FROM TEAM
   2. 즉시 로딩 :  JOIN SQL로 한버에 연관된 객체까지 미리 조회
       Member member = memberDAO.find(memberId);     --> SELECT M.* , T.* FROM MEMBER JOIN TEAM....
       Team team = member.getTeam();
       String teamName = team.getName();


       지연로딩의 문제는 쿼리를 많이 탄다.
       즉시로딩은 MEMBER를 가져오는 순간 TEAM 을 가져오고
       이후에 쓸때는 로딩된 데이터를 가져온다.

       MEMBER TEAM이 항상같이쓰면 즉시로딩을 쓰고
       MEMBER랑 TEAM 간간히만 쓰이고 거의따로 쓰면 지연로딩 기법을 사용한다.



ORM은 객체와 RDB 두기둥위에 있는 기술
- RDB를 이해하는게 중요하다.



